import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import Lasso, Ridge
from sklearn.metrics import r2_score, mean_squared_error
import pandas as pd

# Load the dataset again
housing_data = pd.read_csv(r"housing_price_dataset.csv")
# Now proceed with defining X and y
X = housing_data[["Avg. Area Income", "Avg. Area House Age", "Avg. Area Number of Rooms",
                 "Avg. Area Number of Bedrooms", "Area Population"]]
y = housing_data["Price"]

# Selecting relevant features and target
X = housing_data[["Avg. Area Income", "Avg. Area House Age", "Avg. Area Number of Rooms",
                  "Avg. Area Number of Bedrooms", "Area Population"]]
y = housing_data["Price"]

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hyperparameter tuning for Lasso and Ridge
param_grid = {'alpha': np.logspace(-3, 3, 7)}

# Lasso Regression
lasso = GridSearchCV(Lasso(max_iter=10000), param_grid, cv=5)
lasso.fit(X_train, y_train)
y_pred_lasso = lasso.predict(X_test)

# Ridge Regression
ridge = GridSearchCV(Ridge(), param_grid, cv=5)
ridge.fit(X_train, y_train)
y_pred_ridge = ridge.predict(X_test)
# Performance Evaluation
def evaluate_model(y_true, y_pred, model_name):
    r2 = r2_score(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    print(f"{model_name} Performance:")
    print(
        f"Best Alpha: {lasso.best_params_['alpha'] if 'lasso' in model_name.lower() else ridge.best_params_['alpha']}")
    print(f"RÂ² Score: {r2:.4f}")
    print(f"Mean Squared Error: {mse:.4f}\n")

    # Plot actual vs predicted
    plt.scatter(y_true, y_pred, alpha=0.5, color='blue')
    plt.xlabel("Actual Prices")
    plt.ylabel("Predicted Prices")
    plt.title(f"Actual vs Predicted - {model_name}")
    plt.plot([min(y_true), max(y_true)], [min(y_true), max(y_true)], color='red', linestyle='dashed')
    plt.show()


evaluate_model(y_test, y_pred_lasso, "Lasso Regression")
evaluate_model(y_test, y_pred_ridge, "Ridge Regression")

